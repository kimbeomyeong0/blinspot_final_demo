# 개발 가이드라인

## 🎯 프로젝트 목표
BlindSpot은 **뉴스 편향성 시각화**를 통해 사용자가 다양한 관점의 뉴스를 한눈에 비교할 수 있도록 돕는 플랫폼입니다.

## 📋 개발 원칙

### 1. 데이터 품질 우선
- **본문 추출 성공률 98% 이상** 유지
- 중복 데이터 철저히 제거
- 크롤링 에러 발생 시 로깅 및 복구 메커니즘 구현

### 2. 성능 최적화
- 비동기 처리 활용 (async/await)
- 불필요한 리소스 로딩 차단
- 데이터베이스 쿼리 최적화

### 3. 확장성 고려
- 새로운 언론사 추가 용이하도록 모듈화
- 카테고리 확장 가능한 구조
- API 설계 시 버전 관리 고려

## 🛠️ 코딩 규칙

### Python (크롤링/백엔드)
```python
# 함수명: snake_case
async def crawl_news_articles():
    pass

# 클래스명: PascalCase  
class NewsArticle:
    pass

# 상수: UPPER_SNAKE_CASE
MAX_ARTICLES_PER_CATEGORY = 30

# 파일명: snake_case.py
# crawl_hani.py, main_crawler.py
```

### JavaScript/TypeScript (프론트엔드)
```javascript
// 함수명: camelCase
const fetchNewsData = () => {};

// 컴포넌트명: PascalCase
const NewsCard = () => {};

// 파일명: PascalCase.tsx (컴포넌트)
// NewsCard.tsx, IssueDetail.tsx
```

## 📁 디렉토리 구조 규칙

### 백엔드 (backend/)
```
backend/
├── api/              # API 엔드포인트
├── models/           # 데이터 모델
├── services/         # 비즈니스 로직
├── utils/            # 유틸리티 함수
└── config/           # 설정 파일
```

### 프론트엔드 (frontend/)
```
frontend/
├── components/       # 재사용 가능한 컴포넌트
├── pages/           # 페이지 컴포넌트
├── hooks/           # 커스텀 훅
├── utils/           # 유틸리티 함수
└── styles/          # 스타일 파일
```

## 🔧 기술 스택별 규칙

### 크롤링 (Playwright)
- 각 언론사별 별도 파일로 분리
- 공통 유틸리티는 `utils/` 디렉토리에 위치
- 에러 처리 및 재시도 로직 필수 구현

### 데이터베이스 (Supabase)
- 테이블명: snake_case (articles, news_clusters)
- 컬럼명: snake_case (created_at, article_content)
- 인덱스 최적화 고려

### API 설계
- RESTful API 원칙 준수
- 응답 형식 일관성 유지
- 에러 코드 표준화

## 📊 데이터 품질 관리

### 크롤링 데이터
- 제목, URL, 본문 필수 필드 검증
- 중복 URL 제거
- 본문 길이 최소 100자 이상

### 클러스터링 데이터  
- 유사도 임계값 설정
- 클러스터 크기 제한 (최소 2개, 최대 10개 기사)
- 클러스터 품질 평가 지표 도입

## 🚀 배포 및 운영

### 환경 분리
- `development`: 로컬 개발 환경
- `staging`: 테스트 환경  
- `production`: 운영 환경

### 모니터링
- 크롤링 성공률 모니터링
- API 응답 시간 추적
- 에러 로그 수집 및 알림

## 🔍 테스트 가이드라인

### 크롤링 테스트
- 각 언론사별 개별 테스트 가능
- 본문 추출 성공률 검증
- 중복 제거 로직 테스트

### API 테스트
- 단위 테스트 작성
- 통합 테스트 구현
- 성능 테스트 수행
description:
globs:
alwaysApply: false
---
